### YamlMime:ManagedReference
items:
- uid: Domain.InventoryAggregate.Entities.Inventory
  commentId: T:Domain.InventoryAggregate.Entities.Inventory
  id: Inventory
  parent: Domain.InventoryAggregate.Entities
  children:
  - Domain.InventoryAggregate.Entities.Inventory.#ctor(IList{Domain.InventoryAggregate.Entities.Item})
  - Domain.InventoryAggregate.Entities.Inventory.AddItem(System.String,DateOnly,Domain.InventoryAggregate.ItemType)
  - Domain.InventoryAggregate.Entities.Inventory.GetItems
  - Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired(DateOnly)
  - Domain.InventoryAggregate.Entities.Inventory.RemoveItem(System.String)
  langs:
  - csharp
  - vb
  name: Inventory
  nameWithType: Inventory
  fullName: Domain.InventoryAggregate.Entities.Inventory
  type: Class
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: Inventory
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 7
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nThis is the root entity for the Inventory aggregate\n"
  example: []
  syntax:
    content: 'public class Inventory : object'
    content.vb: >-
      Public Class Inventory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Domain.InventoryAggregate.Entities.Inventory.#ctor(IList{Domain.InventoryAggregate.Entities.Item})
  commentId: M:Domain.InventoryAggregate.Entities.Inventory.#ctor(IList{Domain.InventoryAggregate.Entities.Item})
  id: '#ctor(IList{Domain.InventoryAggregate.Entities.Item})'
  parent: Domain.InventoryAggregate.Entities.Inventory
  langs:
  - csharp
  - vb
  name: Inventory(IList<Item>)
  nameWithType: Inventory.Inventory(IList<Item>)
  fullName: Domain.InventoryAggregate.Entities.Inventory.Inventory(IList<Domain.InventoryAggregate.Entities.Item>)
  type: Constructor
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: .ctor
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 16
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nConstructor for this entity\n"
  example: []
  syntax:
    content: public Inventory(IList<Item> items)
    parameters:
    - id: items
      type: IList{Domain.InventoryAggregate.Entities.Item}
      description: The intial items list
    content.vb: Public Sub New(items As IList(Of Item))
  overload: Domain.InventoryAggregate.Entities.Inventory.#ctor*
  nameWithType.vb: Inventory.Inventory(IList(Of Item))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Domain.InventoryAggregate.Entities.Inventory.Inventory(IList(Of Domain.InventoryAggregate.Entities.Item))
  name.vb: Inventory(IList(Of Item))
- uid: Domain.InventoryAggregate.Entities.Inventory.AddItem(System.String,DateOnly,Domain.InventoryAggregate.ItemType)
  commentId: M:Domain.InventoryAggregate.Entities.Inventory.AddItem(System.String,DateOnly,Domain.InventoryAggregate.ItemType)
  id: AddItem(System.String,DateOnly,Domain.InventoryAggregate.ItemType)
  parent: Domain.InventoryAggregate.Entities.Inventory
  langs:
  - csharp
  - vb
  name: AddItem(String, DateOnly, ItemType)
  nameWithType: Inventory.AddItem(String, DateOnly, ItemType)
  fullName: Domain.InventoryAggregate.Entities.Inventory.AddItem(System.String, DateOnly, Domain.InventoryAggregate.ItemType)
  type: Method
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: AddItem
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 29
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nAdd a new item to the inventory\n"
  example: []
  syntax:
    content: public Item AddItem(string name, DateOnly expirationDate, ItemType type)
    parameters:
    - id: name
      type: System.String
      description: Item&apos;s name
    - id: expirationDate
      type: DateOnly
      description: Item&apos;s expiration date
    - id: type
      type: Domain.InventoryAggregate.ItemType
      description: Item&apos;s type
    return:
      type: Domain.InventoryAggregate.Entities.Item
      description: The newly created item
    content.vb: Public Function AddItem(name As String, expirationDate As DateOnly, type As ItemType) As Item
  overload: Domain.InventoryAggregate.Entities.Inventory.AddItem*
  exceptions:
  - type: Domain.Exceptions.AlreadyExistsException
    commentId: T:Domain.Exceptions.AlreadyExistsException
    description: If an item with the same name already exists
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Domain.InventoryAggregate.Entities.Inventory.RemoveItem(System.String)
  commentId: M:Domain.InventoryAggregate.Entities.Inventory.RemoveItem(System.String)
  id: RemoveItem(System.String)
  parent: Domain.InventoryAggregate.Entities.Inventory
  langs:
  - csharp
  - vb
  name: RemoveItem(String)
  nameWithType: Inventory.RemoveItem(String)
  fullName: Domain.InventoryAggregate.Entities.Inventory.RemoveItem(System.String)
  type: Method
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: RemoveItem
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 42
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nRemove an item from the inventory\n"
  example: []
  syntax:
    content: public void RemoveItem(string name)
    parameters:
    - id: name
      type: System.String
      description: Item&apos;s name
    content.vb: Public Sub RemoveItem(name As String)
  overload: Domain.InventoryAggregate.Entities.Inventory.RemoveItem*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Domain.InventoryAggregate.Entities.Inventory.GetItems
  commentId: M:Domain.InventoryAggregate.Entities.Inventory.GetItems
  id: GetItems
  parent: Domain.InventoryAggregate.Entities.Inventory
  langs:
  - csharp
  - vb
  name: GetItems()
  nameWithType: Inventory.GetItems()
  fullName: Domain.InventoryAggregate.Entities.Inventory.GetItems()
  type: Method
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: GetItems
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 56
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nGet all items\n"
  example: []
  syntax:
    content: public IList<Item> GetItems()
    return:
      type: IList{Domain.InventoryAggregate.Entities.Item}
      description: The complete items list
    content.vb: Public Function GetItems As IList(Of Item)
  overload: Domain.InventoryAggregate.Entities.Inventory.GetItems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired(DateOnly)
  commentId: M:Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired(DateOnly)
  id: MarkAsExpired(DateOnly)
  parent: Domain.InventoryAggregate.Entities.Inventory
  langs:
  - csharp
  - vb
  name: MarkAsExpired(DateOnly)
  nameWithType: Inventory.MarkAsExpired(DateOnly)
  fullName: Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired(DateOnly)
  type: Method
  source:
    remote:
      path: Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
      branch: master
      repo: https://github.com/miguelperezcolom/inventory-manager
    id: MarkAsExpired
    path: ../Domain/Aggregates/InventoryAggregate/Entities/Inventory.cs
    startLine: 66
  assemblies:
  - Domain
  namespace: Domain.InventoryAggregate.Entities
  summary: "\nMark items as expired\n"
  example: []
  syntax:
    content: public IList<Item> MarkAsExpired(DateOnly date)
    parameters:
    - id: date
      type: DateOnly
      description: The date to compare to
    return:
      type: IList{Domain.InventoryAggregate.Entities.Item}
      description: The expired items list
    content.vb: Public Function MarkAsExpired(date As DateOnly) As IList(Of Item)
  overload: Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Domain.InventoryAggregate.Entities
  commentId: N:Domain.InventoryAggregate.Entities
  name: Domain.InventoryAggregate.Entities
  nameWithType: Domain.InventoryAggregate.Entities
  fullName: Domain.InventoryAggregate.Entities
- uid: Domain.InventoryAggregate.Entities.Inventory.#ctor*
  commentId: Overload:Domain.InventoryAggregate.Entities.Inventory.#ctor
  name: Inventory
  nameWithType: Inventory.Inventory
  fullName: Domain.InventoryAggregate.Entities.Inventory.Inventory
- uid: IList{Domain.InventoryAggregate.Entities.Item}
  commentId: '!:IList{Domain.InventoryAggregate.Entities.Item}'
  definition: IList`1
  name: IList<Item>
  nameWithType: IList<Item>
  fullName: IList<Domain.InventoryAggregate.Entities.Item>
  nameWithType.vb: IList(Of Item)
  fullName.vb: IList(Of Domain.InventoryAggregate.Entities.Item)
  name.vb: IList(Of Item)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Domain.InventoryAggregate.Entities.Item
    name: Item
    nameWithType: Item
    fullName: Domain.InventoryAggregate.Entities.Item
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Domain.InventoryAggregate.Entities.Item
    name: Item
    nameWithType: Item
    fullName: Domain.InventoryAggregate.Entities.Item
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Domain.Exceptions.AlreadyExistsException
  commentId: T:Domain.Exceptions.AlreadyExistsException
  name: AlreadyExistsException
  nameWithType: AlreadyExistsException
  fullName: Domain.Exceptions.AlreadyExistsException
- uid: Domain.InventoryAggregate.Entities.Inventory.AddItem*
  commentId: Overload:Domain.InventoryAggregate.Entities.Inventory.AddItem
  name: AddItem
  nameWithType: Inventory.AddItem
  fullName: Domain.InventoryAggregate.Entities.Inventory.AddItem
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DateOnly
  isExternal: true
  name: DateOnly
  nameWithType: DateOnly
  fullName: DateOnly
- uid: Domain.InventoryAggregate.ItemType
  commentId: T:Domain.InventoryAggregate.ItemType
  parent: Domain.InventoryAggregate
  name: ItemType
  nameWithType: ItemType
  fullName: Domain.InventoryAggregate.ItemType
- uid: Domain.InventoryAggregate.Entities.Item
  commentId: T:Domain.InventoryAggregate.Entities.Item
  parent: Domain.InventoryAggregate.Entities
  name: Item
  nameWithType: Item
  fullName: Domain.InventoryAggregate.Entities.Item
- uid: Domain.InventoryAggregate
  commentId: N:Domain.InventoryAggregate
  name: Domain.InventoryAggregate
  nameWithType: Domain.InventoryAggregate
  fullName: Domain.InventoryAggregate
- uid: Domain.InventoryAggregate.Entities.Inventory.RemoveItem*
  commentId: Overload:Domain.InventoryAggregate.Entities.Inventory.RemoveItem
  name: RemoveItem
  nameWithType: Inventory.RemoveItem
  fullName: Domain.InventoryAggregate.Entities.Inventory.RemoveItem
- uid: Domain.InventoryAggregate.Entities.Inventory.GetItems*
  commentId: Overload:Domain.InventoryAggregate.Entities.Inventory.GetItems
  name: GetItems
  nameWithType: Inventory.GetItems
  fullName: Domain.InventoryAggregate.Entities.Inventory.GetItems
- uid: Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired*
  commentId: Overload:Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired
  name: MarkAsExpired
  nameWithType: Inventory.MarkAsExpired
  fullName: Domain.InventoryAggregate.Entities.Inventory.MarkAsExpired
